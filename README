This is a MATE panel applet which allows you to enjoy football live scores
feed. 

USAGE

You can select one or more leagues to check. The applet will notify you on each
of the following events: commenicing of a game, half time, game's end and goal
scored. To select which leagues to follow, right-click the applet.
Notifications will be shown up to 3 a time. 

You can also view all the currents scores. To do so, left-click the applet.
The window will refresh each time an update is received. If you expand one or 
more leagues, this will be rememered between window closures and also between 
applet restarts. When applet is restarted, the previously expanded leagues 
will be on top of the list. 

When a game is in progress, a coloured dot will let you quickly check its
status: green means first half, yellow means second half before the 80th 
minute and red means after 80th minute (and extra time).

Past games will be stored in the list for 16 hours after their original start
time. Future games will appear on the list up to 16 fours before they begin.

DATA SOURCES

Real time sports scores are big business, so nobody is willing to give out his
data. Ideally, the applet should use a source of data in machine-readable
format (JSON, RSS, XML...). Unfortunately, I was not able to find any service
which will provie such data free of charge. The applet now has to parse web
pages, which inevitably makes it susceptible to errors on every change of the
page layout. If you know of any good source of machibe-readable live score 
that is available for free (even in the expense of viewing ads), please, let
me know (see AUTHORS for contact info).

HACKING

Yes, you can write your very own data (feed) provider. You need to compile it
as shared library and put it in LIBEXEC/livescore_applet_feeds directory.

The entry point of your library should be named "feed_main" and should look
like this:

	int feed_main(match_data *, int *);

For the "match_data" structure, see applet.h.

The function should point the first pointer to the first element of an array
of "match_data" structures. When invoked it will be supplied a valid pointer
(no need to malloc() anything, just realloc() to expand).

The function should dereference the second pointer and set it to the size of
the array that the first pointer points to.  When invoked, the pointer will
point to a value of 0.

Function "feed_main" should return 1 on success or 0 on failure. 

If you need to fetch something over HTTP, you can use the get_url() function
from http.c. It will get the URL for you and place it in the file you
specified.



IMPORTANT! This free softwarte is released with hope that it will be useful, 
but with no warranty of any type at all. Use it at your own risk. You are free
to distribute it as well as to modify it as long as you preserve the original 
License. See LICENSE file for details.


